# Code generated by github.com/lolopinto/ent/ent, DO NOT edit.

"""add answer_comments table
add answer_comments_authors_edges table
add index answer_comments_authors_edges_time_idx to answer_comments_authors_edges
add answer_comments_edges table
add index answer_comments_edges_time_idx to answer_comments_edges
add question_comment_authors_edges table
add index question_comment_authors_edges_time_idx to question_comment_authors_edges
add question_comments table
add question_comments_edges table
add index question_comments_edges_time_idx to question_comments_edges
add user_authored_answer_comments_edges table
add index user_authored_answer_comments_edges_time_idx to user_authored_answer_comments_edges
add user_authored_question_comments_edges table
add index user_authored_question_comments_edges_time_idx to user_authored_question_comments_edges
add edges AnswerCommentsToAuthorsEdge, AnswerToCommentsEdge, QuestionCommentToAuthorsEdge, QuestionToCommentsEdge, UserToAuthorToAuthoredAnswerCommentsEdge, UserToAuthorToAuthoredQuestionCommentsEdge, UserToAuthoredAnswerCommentsEdge, UserToAuthoredQuestionCommentsEdge

Revision ID: 4d41e915e805
Revises: b08773b08a43
Create Date: 2021-06-23 09:38:22.311214+00:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4d41e915e805'
down_revision = 'b08773b08a43'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('answer_comments',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('body', sa.Text(), nullable=False),
                    sa.Column('answer_id', postgresql.UUID(), nullable=False),
                    sa.Column('user_id', postgresql.UUID(), nullable=False),
                    sa.PrimaryKeyConstraint(
                        'id', name='answer_comments_id_pkey')
                    )
    op.create_table('answer_comments_authors_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='answer_comments_authors_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('answer_comments_authors_edges_time_idx',
                    'answer_comments_authors_edges', ['time'], unique=False)
    op.create_table('answer_comments_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='answer_comments_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('answer_comments_edges_time_idx',
                    'answer_comments_edges', ['time'], unique=False)
    op.create_table('question_comment_authors_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='question_comment_authors_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('question_comment_authors_edges_time_idx',
                    'question_comment_authors_edges', ['time'], unique=False)
    op.create_table('question_comments',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('body', sa.Text(), nullable=False),
                    sa.Column('question_id', postgresql.UUID(),
                              nullable=False),
                    sa.Column('user_id', postgresql.UUID(), nullable=False),
                    sa.PrimaryKeyConstraint(
                        'id', name='question_comments_id_pkey')
                    )
    op.create_table('question_comments_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='question_comments_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('question_comments_edges_time_idx',
                    'question_comments_edges', ['time'], unique=False)
    op.create_table('user_authored_answer_comments_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='user_authored_answer_comments_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('user_authored_answer_comments_edges_time_idx',
                    'user_authored_answer_comments_edges', ['time'], unique=False)
    op.create_table('user_authored_question_comments_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='user_authored_question_comments_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('user_authored_question_comments_edges_time_idx',
                    'user_authored_question_comments_edges', ['time'], unique=False)
    op.add_edges([
        {'edge_name': 'AnswerCommentsToAuthorsEdge', 'edge_type': '39bfd663-0fd1-4268-aed3-8978ac3af5f9',
            'edge_table': 'answer_comments_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '21319a5d-1678-4a97-8d9f-e8af198504b2'},
        {'edge_name': 'AnswerToCommentsEdge', 'edge_type': 'f69f8452-a1be-45e8-8c71-a1fcc6a0dbcd',
            'edge_table': 'answer_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'QuestionCommentToAuthorsEdge', 'edge_type': '1daa71ae-916d-45d5-b86a-91de3dc33356',
            'edge_table': 'question_comment_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '1888c833-ad80-4f06-846b-96fab877b50b'},
        {'edge_name': 'QuestionToCommentsEdge', 'edge_type': '1f939a84-c765-4168-a6d1-ac9deea9d34e',
            'edge_table': 'question_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToAuthorToAuthoredAnswerCommentsEdge', 'edge_type': '21319a5d-1678-4a97-8d9f-e8af198504b2',
            'edge_table': 'answer_comments_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '39bfd663-0fd1-4268-aed3-8978ac3af5f9'},
        {'edge_name': 'UserToAuthorToAuthoredQuestionCommentsEdge', 'edge_type': '1888c833-ad80-4f06-846b-96fab877b50b',
            'edge_table': 'question_comment_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '1daa71ae-916d-45d5-b86a-91de3dc33356'},
        {'edge_name': 'UserToAuthoredAnswerCommentsEdge', 'edge_type': '2bd913d5-a2cb-485b-9563-4c2e447b99b2',
            'edge_table': 'user_authored_answer_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToAuthoredQuestionCommentsEdge', 'edge_type': '641dd0e0-ca29-44cb-8c78-21c6a9962609',
            'edge_table': 'user_authored_question_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
    ])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.remove_edges([
        {'edge_name': 'AnswerCommentsToAuthorsEdge', 'edge_type': '39bfd663-0fd1-4268-aed3-8978ac3af5f9',
            'edge_table': 'answer_comments_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '21319a5d-1678-4a97-8d9f-e8af198504b2'},
        {'edge_name': 'AnswerToCommentsEdge', 'edge_type': 'f69f8452-a1be-45e8-8c71-a1fcc6a0dbcd',
            'edge_table': 'answer_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'QuestionCommentToAuthorsEdge', 'edge_type': '1daa71ae-916d-45d5-b86a-91de3dc33356',
            'edge_table': 'question_comment_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '1888c833-ad80-4f06-846b-96fab877b50b'},
        {'edge_name': 'QuestionToCommentsEdge', 'edge_type': '1f939a84-c765-4168-a6d1-ac9deea9d34e',
            'edge_table': 'question_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToAuthorToAuthoredAnswerCommentsEdge', 'edge_type': '21319a5d-1678-4a97-8d9f-e8af198504b2',
            'edge_table': 'answer_comments_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '39bfd663-0fd1-4268-aed3-8978ac3af5f9'},
        {'edge_name': 'UserToAuthorToAuthoredQuestionCommentsEdge', 'edge_type': '1888c833-ad80-4f06-846b-96fab877b50b',
            'edge_table': 'question_comment_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '1daa71ae-916d-45d5-b86a-91de3dc33356'},
        {'edge_name': 'UserToAuthoredAnswerCommentsEdge', 'edge_type': '2bd913d5-a2cb-485b-9563-4c2e447b99b2',
            'edge_table': 'user_authored_answer_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToAuthoredQuestionCommentsEdge', 'edge_type': '641dd0e0-ca29-44cb-8c78-21c6a9962609',
            'edge_table': 'user_authored_question_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
    ])

    op.drop_index('user_authored_question_comments_edges_time_idx',
                  table_name='user_authored_question_comments_edges')
    op.drop_table('user_authored_question_comments_edges')
    op.drop_index('user_authored_answer_comments_edges_time_idx',
                  table_name='user_authored_answer_comments_edges')
    op.drop_table('user_authored_answer_comments_edges')
    op.drop_index('question_comments_edges_time_idx',
                  table_name='question_comments_edges')
    op.drop_table('question_comments_edges')
    op.drop_table('question_comments')
    op.drop_index('question_comment_authors_edges_time_idx',
                  table_name='question_comment_authors_edges')
    op.drop_table('question_comment_authors_edges')
    op.drop_index('answer_comments_edges_time_idx',
                  table_name='answer_comments_edges')
    op.drop_table('answer_comments_edges')
    op.drop_index('answer_comments_authors_edges_time_idx',
                  table_name='answer_comments_authors_edges')
    op.drop_table('answer_comments_authors_edges')
    op.drop_table('answer_comments')
    # ### end Alembic commands ###
