# Code generated by github.com/lolopinto/ent/ent, DO NOT edit.

"""add answer_authors_edges table
add index answer_authors_edges_time_idx to answer_authors_edges
add answer_comment_authors_edges table
add index answer_comment_authors_edges_time_idx to answer_comment_authors_edges
add answer_comments table
add answer_comments_edges table
add index answer_comments_edges_time_idx to answer_comments_edges
add answers table
add assoc_edge_config table
add question_answers_edges table
add index question_answers_edges_time_idx to question_answers_edges
add question_authors_edges table
add index question_authors_edges_time_idx to question_authors_edges
add question_comment_authors_edges table
add index question_comment_authors_edges_time_idx to question_comment_authors_edges
add question_comments table
add question_comments_edges table
add index question_comments_edges_time_idx to question_comments_edges
add question_private_note_authors_edges table
add index question_private_note_authors_edges_time_idx to question_private_note_authors_edges
add question_private_notes table
add question_private_notes_edges table
add index question_private_notes_edges_time_idx to question_private_notes_edges
add questions table
add user_authored_answer_comments_edges table
add index user_authored_answer_comments_edges_time_idx to user_authored_answer_comments_edges
add user_authored_answers_edges table
add index user_authored_answers_edges_time_idx to user_authored_answers_edges
add user_authored_question_comments_edges table
add index user_authored_question_comments_edges_time_idx to user_authored_question_comments_edges
add user_authored_questions_edges table
add index user_authored_questions_edges_time_idx to user_authored_questions_edges
add user_question_private_notes_edges table
add index user_question_private_notes_edges_time_idx to user_question_private_notes_edges
add users table
add edges AnswerCommentToAuthorsEdge, AnswerToAuthorsEdge, AnswerToCommentsEdge, QuestionCommentToAuthorsEdge, QuestionPrivateNoteToAuthorsEdge, QuestionToAnswersEdge, QuestionToAuthorsEdge, QuestionToCommentsEdge, QuestionToPrivateNotesEdge, UserToAuthorToAuthoredAnswerCommentsEdge, UserToAuthorToAuthoredAnswersEdge, UserToAuthorToAuthoredQuestionCommentsEdge, UserToAuthorToAuthoredQuestionsEdge, UserToAuthoredAnswerCommentsEdge, UserToAuthoredAnswersEdge, UserToAuthoredQuestionCommentsEdge, UserToAuthoredQuestionsEdge, UserToQuestionPrivateNotesEdge, UserToUserQuestionPrivateNotesEdge

Revision ID: e6217d935c55
Revises: 
Create Date: 2021-06-26 06:41:47.282176+00:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e6217d935c55'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('answer_authors_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='answer_authors_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('answer_authors_edges_time_idx',
                    'answer_authors_edges', ['time'], unique=False)
    op.create_table('answer_comment_authors_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='answer_comment_authors_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('answer_comment_authors_edges_time_idx',
                    'answer_comment_authors_edges', ['time'], unique=False)
    op.create_table('answer_comments',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('body', sa.Text(), nullable=False),
                    sa.Column('answer_id', postgresql.UUID(), nullable=False),
                    sa.Column('user_id', postgresql.UUID(), nullable=False),
                    sa.PrimaryKeyConstraint(
                        'id', name='answer_comments_id_pkey')
                    )
    op.create_table('answer_comments_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='answer_comments_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('answer_comments_edges_time_idx',
                    'answer_comments_edges', ['time'], unique=False)
    op.create_table('answers',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('body', sa.Text(), nullable=False),
                    sa.Column('accepted_answer', sa.Boolean(), nullable=False),
                    sa.Column('question_id', postgresql.UUID(),
                              nullable=False),
                    sa.Column('user_id', postgresql.UUID(), nullable=False),
                    sa.PrimaryKeyConstraint('id', name='answers_id_pkey')
                    )
    op.create_table('assoc_edge_config',
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('edge_name', sa.Text(), nullable=False),
                    sa.Column('symmetric_edge', sa.Boolean(),
                              server_default='false', nullable=False),
                    sa.Column('inverse_edge_type',
                              postgresql.UUID(), nullable=True),
                    sa.Column('edge_table', sa.Text(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
                    sa.ForeignKeyConstraint(['inverse_edge_type'], ['assoc_edge_config.edge_type'],
                                            name='assoc_edge_config_inverse_edge_type_fkey', ondelete='RESTRICT'),
                    sa.PrimaryKeyConstraint(
                        'edge_type', name='assoc_edge_config_edge_type_pkey'),
                    sa.UniqueConstraint(
                        'edge_name', name='assoc_edge_config_unique_edge_name')
                    )
    op.create_table('question_answers_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='question_answers_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('question_answers_edges_time_idx',
                    'question_answers_edges', ['time'], unique=False)
    op.create_table('question_authors_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='question_authors_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('question_authors_edges_time_idx',
                    'question_authors_edges', ['time'], unique=False)
    op.create_table('question_comment_authors_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='question_comment_authors_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('question_comment_authors_edges_time_idx',
                    'question_comment_authors_edges', ['time'], unique=False)
    op.create_table('question_comments',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('body', sa.Text(), nullable=False),
                    sa.Column('question_id', postgresql.UUID(),
                              nullable=False),
                    sa.Column('user_id', postgresql.UUID(), nullable=False),
                    sa.PrimaryKeyConstraint(
                        'id', name='question_comments_id_pkey')
                    )
    op.create_table('question_comments_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='question_comments_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('question_comments_edges_time_idx',
                    'question_comments_edges', ['time'], unique=False)
    op.create_table('question_private_note_authors_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='question_private_note_authors_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('question_private_note_authors_edges_time_idx',
                    'question_private_note_authors_edges', ['time'], unique=False)
    op.create_table('question_private_notes',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('body', sa.Text(), nullable=False),
                    sa.Column('question_id', postgresql.UUID(),
                              nullable=False),
                    sa.Column('user_id', postgresql.UUID(), nullable=False),
                    sa.PrimaryKeyConstraint(
                        'id', name='question_private_notes_id_pkey')
                    )
    op.create_table('question_private_notes_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='question_private_notes_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('question_private_notes_edges_time_idx',
                    'question_private_notes_edges', ['time'], unique=False)
    op.create_table('questions',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('title', sa.Text(), nullable=False),
                    sa.Column('question_body', sa.Text(), nullable=False),
                    sa.Column('answered', sa.Boolean(), nullable=False),
                    sa.Column('user_id', postgresql.UUID(), nullable=False),
                    sa.PrimaryKeyConstraint('id', name='questions_id_pkey')
                    )
    op.create_table('user_authored_answer_comments_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='user_authored_answer_comments_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('user_authored_answer_comments_edges_time_idx',
                    'user_authored_answer_comments_edges', ['time'], unique=False)
    op.create_table('user_authored_answers_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='user_authored_answers_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('user_authored_answers_edges_time_idx',
                    'user_authored_answers_edges', ['time'], unique=False)
    op.create_table('user_authored_question_comments_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='user_authored_question_comments_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('user_authored_question_comments_edges_time_idx',
                    'user_authored_question_comments_edges', ['time'], unique=False)
    op.create_table('user_authored_questions_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='user_authored_questions_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('user_authored_questions_edges_time_idx',
                    'user_authored_questions_edges', ['time'], unique=False)
    op.create_table('user_question_private_notes_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='user_question_private_notes_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('user_question_private_notes_edges_time_idx',
                    'user_question_private_notes_edges', ['time'], unique=False)
    op.create_table('users',
                    sa.Column('id', postgresql.UUID(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('first_name', sa.Text(), nullable=False),
                    sa.Column('last_name', sa.Text(), nullable=False),
                    sa.Column('email_address', sa.Text(), nullable=False),
                    sa.Column('password', sa.Text(), nullable=False),
                    sa.PrimaryKeyConstraint('id', name='users_id_pkey'),
                    sa.UniqueConstraint(
                        'email_address', name='users_unique_email_address')
                    )
    op.add_edges([
        {'edge_name': 'AnswerCommentToAuthorsEdge', 'edge_type': '27e1aa22-2690-4253-81d4-d1e0cc263b50',
            'edge_table': 'answer_comment_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'b01a492e-281c-4844-9ef6-9dcfad9d4994'},
        {'edge_name': 'AnswerToAuthorsEdge', 'edge_type': '50274145-6c64-4693-a0c3-b19e38195a8f',
            'edge_table': 'answer_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '63a655cd-717a-4875-b0cb-3d515000de24'},
        {'edge_name': 'AnswerToCommentsEdge', 'edge_type': '588823a4-f9bb-4c8a-bb76-8b9151ce2acc',
            'edge_table': 'answer_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'QuestionCommentToAuthorsEdge', 'edge_type': 'da0fd4ae-68e0-4fc7-a59d-8c4f70fa478e',
            'edge_table': 'question_comment_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'c245f9ce-1461-4921-837a-40bc6ae9f726'},
        {'edge_name': 'QuestionPrivateNoteToAuthorsEdge', 'edge_type': 'd17eba1c-8ce7-4262-83b5-0a0f880f6849',
            'edge_table': 'question_private_note_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '2fc54251-edbd-47ad-bdac-1af9306e3a8e'},
        {'edge_name': 'QuestionToAnswersEdge', 'edge_type': 'f5f7ab79-9f39-4f5e-878b-c0183f3e8617',
            'edge_table': 'question_answers_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'QuestionToAuthorsEdge', 'edge_type': 'f3795d44-be58-4b04-b434-4bb0d418f66b',
            'edge_table': 'question_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'afbc66d2-d1a1-4b2d-bf4f-0d5f81927995'},
        {'edge_name': 'QuestionToCommentsEdge', 'edge_type': 'c448499e-c78d-4e87-8627-b4c7f586a2f6',
            'edge_table': 'question_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'QuestionToPrivateNotesEdge', 'edge_type': 'da17ffb4-d545-403d-bb50-0f8a63c71792',
            'edge_table': 'question_private_notes_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToAuthorToAuthoredAnswerCommentsEdge', 'edge_type': 'b01a492e-281c-4844-9ef6-9dcfad9d4994',
            'edge_table': 'answer_comment_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '27e1aa22-2690-4253-81d4-d1e0cc263b50'},
        {'edge_name': 'UserToAuthorToAuthoredAnswersEdge', 'edge_type': '63a655cd-717a-4875-b0cb-3d515000de24',
            'edge_table': 'answer_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '50274145-6c64-4693-a0c3-b19e38195a8f'},
        {'edge_name': 'UserToAuthorToAuthoredQuestionCommentsEdge', 'edge_type': 'c245f9ce-1461-4921-837a-40bc6ae9f726',
            'edge_table': 'question_comment_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'da0fd4ae-68e0-4fc7-a59d-8c4f70fa478e'},
        {'edge_name': 'UserToAuthorToAuthoredQuestionsEdge', 'edge_type': 'afbc66d2-d1a1-4b2d-bf4f-0d5f81927995',
            'edge_table': 'question_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'f3795d44-be58-4b04-b434-4bb0d418f66b'},
        {'edge_name': 'UserToAuthoredAnswerCommentsEdge', 'edge_type': 'cff7203e-9188-4ff2-a668-2ce33abd0a58',
            'edge_table': 'user_authored_answer_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToAuthoredAnswersEdge', 'edge_type': '2e49fa7d-2b51-45d2-9e0f-7461c2c03039',
            'edge_table': 'user_authored_answers_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToAuthoredQuestionCommentsEdge', 'edge_type': '1d177e91-2f4f-4e98-9880-5e6778f16495',
            'edge_table': 'user_authored_question_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToAuthoredQuestionsEdge', 'edge_type': 'c9dae4e1-5325-4d9d-94e9-4a5417454eed',
            'edge_table': 'user_authored_questions_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToQuestionPrivateNotesEdge', 'edge_type': 'b6f4fe67-f4bf-47b6-a0b1-5153a56f2fb4',
            'edge_table': 'user_question_private_notes_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToUserQuestionPrivateNotesEdge', 'edge_type': '2fc54251-edbd-47ad-bdac-1af9306e3a8e',
            'edge_table': 'question_private_note_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'd17eba1c-8ce7-4262-83b5-0a0f880f6849'},
    ])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.remove_edges([
        {'edge_name': 'AnswerCommentToAuthorsEdge', 'edge_type': '27e1aa22-2690-4253-81d4-d1e0cc263b50',
            'edge_table': 'answer_comment_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'b01a492e-281c-4844-9ef6-9dcfad9d4994'},
        {'edge_name': 'AnswerToAuthorsEdge', 'edge_type': '50274145-6c64-4693-a0c3-b19e38195a8f',
            'edge_table': 'answer_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '63a655cd-717a-4875-b0cb-3d515000de24'},
        {'edge_name': 'AnswerToCommentsEdge', 'edge_type': '588823a4-f9bb-4c8a-bb76-8b9151ce2acc',
            'edge_table': 'answer_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'QuestionCommentToAuthorsEdge', 'edge_type': 'da0fd4ae-68e0-4fc7-a59d-8c4f70fa478e',
            'edge_table': 'question_comment_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'c245f9ce-1461-4921-837a-40bc6ae9f726'},
        {'edge_name': 'QuestionPrivateNoteToAuthorsEdge', 'edge_type': 'd17eba1c-8ce7-4262-83b5-0a0f880f6849',
            'edge_table': 'question_private_note_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '2fc54251-edbd-47ad-bdac-1af9306e3a8e'},
        {'edge_name': 'QuestionToAnswersEdge', 'edge_type': 'f5f7ab79-9f39-4f5e-878b-c0183f3e8617',
            'edge_table': 'question_answers_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'QuestionToAuthorsEdge', 'edge_type': 'f3795d44-be58-4b04-b434-4bb0d418f66b',
            'edge_table': 'question_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'afbc66d2-d1a1-4b2d-bf4f-0d5f81927995'},
        {'edge_name': 'QuestionToCommentsEdge', 'edge_type': 'c448499e-c78d-4e87-8627-b4c7f586a2f6',
            'edge_table': 'question_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'QuestionToPrivateNotesEdge', 'edge_type': 'da17ffb4-d545-403d-bb50-0f8a63c71792',
            'edge_table': 'question_private_notes_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToAuthorToAuthoredAnswerCommentsEdge', 'edge_type': 'b01a492e-281c-4844-9ef6-9dcfad9d4994',
            'edge_table': 'answer_comment_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '27e1aa22-2690-4253-81d4-d1e0cc263b50'},
        {'edge_name': 'UserToAuthorToAuthoredAnswersEdge', 'edge_type': '63a655cd-717a-4875-b0cb-3d515000de24',
            'edge_table': 'answer_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': '50274145-6c64-4693-a0c3-b19e38195a8f'},
        {'edge_name': 'UserToAuthorToAuthoredQuestionCommentsEdge', 'edge_type': 'c245f9ce-1461-4921-837a-40bc6ae9f726',
            'edge_table': 'question_comment_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'da0fd4ae-68e0-4fc7-a59d-8c4f70fa478e'},
        {'edge_name': 'UserToAuthorToAuthoredQuestionsEdge', 'edge_type': 'afbc66d2-d1a1-4b2d-bf4f-0d5f81927995',
            'edge_table': 'question_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'f3795d44-be58-4b04-b434-4bb0d418f66b'},
        {'edge_name': 'UserToAuthoredAnswerCommentsEdge', 'edge_type': 'cff7203e-9188-4ff2-a668-2ce33abd0a58',
            'edge_table': 'user_authored_answer_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToAuthoredAnswersEdge', 'edge_type': '2e49fa7d-2b51-45d2-9e0f-7461c2c03039',
            'edge_table': 'user_authored_answers_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToAuthoredQuestionCommentsEdge', 'edge_type': '1d177e91-2f4f-4e98-9880-5e6778f16495',
            'edge_table': 'user_authored_question_comments_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToAuthoredQuestionsEdge', 'edge_type': 'c9dae4e1-5325-4d9d-94e9-4a5417454eed',
            'edge_table': 'user_authored_questions_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToQuestionPrivateNotesEdge', 'edge_type': 'b6f4fe67-f4bf-47b6-a0b1-5153a56f2fb4',
            'edge_table': 'user_question_private_notes_edges', 'symmetric_edge': False, 'inverse_edge_type': None},
        {'edge_name': 'UserToUserQuestionPrivateNotesEdge', 'edge_type': '2fc54251-edbd-47ad-bdac-1af9306e3a8e',
            'edge_table': 'question_private_note_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'd17eba1c-8ce7-4262-83b5-0a0f880f6849'},
    ])

    op.drop_table('users')
    op.drop_index('user_question_private_notes_edges_time_idx',
                  table_name='user_question_private_notes_edges')
    op.drop_table('user_question_private_notes_edges')
    op.drop_index('user_authored_questions_edges_time_idx',
                  table_name='user_authored_questions_edges')
    op.drop_table('user_authored_questions_edges')
    op.drop_index('user_authored_question_comments_edges_time_idx',
                  table_name='user_authored_question_comments_edges')
    op.drop_table('user_authored_question_comments_edges')
    op.drop_index('user_authored_answers_edges_time_idx',
                  table_name='user_authored_answers_edges')
    op.drop_table('user_authored_answers_edges')
    op.drop_index('user_authored_answer_comments_edges_time_idx',
                  table_name='user_authored_answer_comments_edges')
    op.drop_table('user_authored_answer_comments_edges')
    op.drop_table('questions')
    op.drop_index('question_private_notes_edges_time_idx',
                  table_name='question_private_notes_edges')
    op.drop_table('question_private_notes_edges')
    op.drop_table('question_private_notes')
    op.drop_index('question_private_note_authors_edges_time_idx',
                  table_name='question_private_note_authors_edges')
    op.drop_table('question_private_note_authors_edges')
    op.drop_index('question_comments_edges_time_idx',
                  table_name='question_comments_edges')
    op.drop_table('question_comments_edges')
    op.drop_table('question_comments')
    op.drop_index('question_comment_authors_edges_time_idx',
                  table_name='question_comment_authors_edges')
    op.drop_table('question_comment_authors_edges')
    op.drop_index('question_authors_edges_time_idx',
                  table_name='question_authors_edges')
    op.drop_table('question_authors_edges')
    op.drop_index('question_answers_edges_time_idx',
                  table_name='question_answers_edges')
    op.drop_table('question_answers_edges')
    op.drop_table('assoc_edge_config')
    op.drop_table('answers')
    op.drop_index('answer_comments_edges_time_idx',
                  table_name='answer_comments_edges')
    op.drop_table('answer_comments_edges')
    op.drop_table('answer_comments')
    op.drop_index('answer_comment_authors_edges_time_idx',
                  table_name='answer_comment_authors_edges')
    op.drop_table('answer_comment_authors_edges')
    op.drop_index('answer_authors_edges_time_idx',
                  table_name='answer_authors_edges')
    op.drop_table('answer_authors_edges')
    # ### end Alembic commands ###
