# Code generated by github.com/lolopinto/ent/ent, DO NOT edit.

"""add assoc_edge_config table
add question_authors_edges table
add index question_authors_edges_time_idx to question_authors_edges
add user_authored_questions_edges table
add index user_authored_questions_edges_time_idx to user_authored_questions_edges
add column user_id to table questions
add edges QuestionToAuthorsEdge, UserToAuthoredQuestionsEdge

Revision ID: f70f495349cb
Revises: 831b8363711c
Create Date: 2021-06-21 21:02:43.428892+00:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f70f495349cb'
down_revision = '831b8363711c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('assoc_edge_config',
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('edge_name', sa.Text(), nullable=False),
                    sa.Column('symmetric_edge', sa.Boolean(),
                              server_default='false', nullable=False),
                    sa.Column('inverse_edge_type',
                              postgresql.UUID(), nullable=True),
                    sa.Column('edge_table', sa.Text(), nullable=False),
                    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
                    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
                    sa.ForeignKeyConstraint(['inverse_edge_type'], ['assoc_edge_config.edge_type'],
                                            name='assoc_edge_config_inverse_edge_type_fkey', ondelete='RESTRICT'),
                    sa.PrimaryKeyConstraint(
                        'edge_type', name='assoc_edge_config_edge_type_pkey'),
                    sa.UniqueConstraint(
                        'edge_name', name='assoc_edge_config_unique_edge_name')
                    )
    op.create_table('question_authors_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='question_authors_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('question_authors_edges_time_idx',
                    'question_authors_edges', ['time'], unique=False)
    op.create_table('user_authored_questions_edges',
                    sa.Column('id1', postgresql.UUID(), nullable=False),
                    sa.Column('id1_type', sa.Text(), nullable=False),
                    sa.Column('edge_type', postgresql.UUID(), nullable=False),
                    sa.Column('id2', postgresql.UUID(), nullable=False),
                    sa.Column('id2_type', sa.Text(), nullable=False),
                    sa.Column('time', sa.TIMESTAMP(), nullable=False),
                    sa.Column('data', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint(
                        'id1', 'edge_type', 'id2', name='user_authored_questions_edges_id1_edge_type_id2_pkey')
                    )
    op.create_index('user_authored_questions_edges_time_idx',
                    'user_authored_questions_edges', ['time'], unique=False)
    op.add_column('questions', sa.Column(
        'user_id', postgresql.UUID(), nullable=False))
    op.add_edges([
        {'edge_name': 'QuestionToAuthorsEdge', 'edge_type': 'dbdae75e-1072-438e-8713-4f4284b289ad',
            'edge_table': 'question_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'eb398e63-df78-40d2-9e86-50a3a788c88f'},
        {'edge_name': 'UserToAuthoredQuestionsEdge', 'edge_type': 'eb398e63-df78-40d2-9e86-50a3a788c88f',
            'edge_table': 'question_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'dbdae75e-1072-438e-8713-4f4284b289ad'},
    ])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.remove_edges([
        {'edge_name': 'QuestionToAuthorsEdge', 'edge_type': 'dbdae75e-1072-438e-8713-4f4284b289ad',
            'edge_table': 'question_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'eb398e63-df78-40d2-9e86-50a3a788c88f'},
        {'edge_name': 'UserToAuthoredQuestionsEdge', 'edge_type': 'eb398e63-df78-40d2-9e86-50a3a788c88f',
            'edge_table': 'question_authors_edges', 'symmetric_edge': False, 'inverse_edge_type': 'dbdae75e-1072-438e-8713-4f4284b289ad'},
    ])

    op.drop_column('questions', 'user_id')
    op.drop_index('user_authored_questions_edges_time_idx',
                  table_name='user_authored_questions_edges')
    op.drop_table('user_authored_questions_edges')
    op.drop_index('question_authors_edges_time_idx',
                  table_name='question_authors_edges')
    op.drop_table('question_authors_edges')
    op.drop_table('assoc_edge_config')
    # ### end Alembic commands ###
