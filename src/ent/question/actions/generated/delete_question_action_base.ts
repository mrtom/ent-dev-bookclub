// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import { Action, Changeset, WriteOperation } from "@snowtop/ent/action";
import { Question } from "src/ent/";
import {
  QuestionBuilder,
  QuestionInput,
} from "src/ent/question/actions/question_builder";

export class DeleteQuestionActionBase implements Action<Question> {
  public readonly builder: QuestionBuilder;
  public readonly viewer: Viewer;
  protected question: Question;

  constructor(viewer: Viewer, question: Question) {
    this.viewer = viewer;
    this.builder = new QuestionBuilder(
      this.viewer,
      WriteOperation.Delete,
      this,
      question,
    );
    this.question = question;
  }

  getPrivacyPolicy(): PrivacyPolicy {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): QuestionInput {
    return {};
  }

  async changeset(): Promise<Changeset<Question>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<void> {
    await this.builder.save();
  }

  async saveX(): Promise<void> {
    await this.builder.saveX();
  }

  static create<T extends DeleteQuestionActionBase>(
    this: new (viewer: Viewer, question: Question) => T,
    viewer: Viewer,
    question: Question,
  ): DeleteQuestionActionBase {
    return new this(viewer, question);
  }

  static async saveXFromID<T extends DeleteQuestionActionBase>(
    this: new (viewer: Viewer, question: Question) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<void> {
    let question = await Question.loadX(viewer, id);
    return await new this(viewer, question).saveX();
  }
}
