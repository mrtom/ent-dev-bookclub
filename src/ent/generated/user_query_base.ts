// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AssocEdgeCountLoaderFactory,
  AssocEdgeLoaderFactory,
  AssocEdgeQueryBase,
  EdgeQuerySource,
  Viewer,
} from "@lolopinto/ent";
import {
  EdgeType,
  Question,
  QuestionToAuthorsQuery,
  User,
  UserToAuthorToAuthoredQuestionsEdge,
  UserToAuthoredQuestionsEdge,
} from "src/ent/internal";

export const userToAuthorToAuthoredQuestionsCountLoaderFactory =
  new AssocEdgeCountLoaderFactory(EdgeType.UserToAuthorToAuthoredQuestions);
export const userToAuthorToAuthoredQuestionsDataLoaderFactory =
  new AssocEdgeLoaderFactory(
    EdgeType.UserToAuthorToAuthoredQuestions,
    () => UserToAuthorToAuthoredQuestionsEdge,
  );

export const userToAuthoredQuestionsCountLoaderFactory =
  new AssocEdgeCountLoaderFactory(EdgeType.UserToAuthoredQuestions);
export const userToAuthoredQuestionsDataLoaderFactory =
  new AssocEdgeLoaderFactory(
    EdgeType.UserToAuthoredQuestions,
    () => UserToAuthoredQuestionsEdge,
  );

export class UserToAuthorToAuthoredQuestionsQueryBase extends AssocEdgeQueryBase<
  User,
  Question,
  UserToAuthorToAuthoredQuestionsEdge
> {
  constructor(viewer: Viewer, src: EdgeQuerySource<User>) {
    super(
      viewer,
      src,
      userToAuthorToAuthoredQuestionsCountLoaderFactory,
      userToAuthorToAuthoredQuestionsDataLoaderFactory,
      Question.loaderOptions(),
    );
  }

  static query<T extends UserToAuthorToAuthoredQuestionsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<User>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<User>,
  ): T {
    return new this(viewer, src);
  }

  queryAuthors(): QuestionToAuthorsQuery {
    return QuestionToAuthorsQuery.query(this.viewer, this);
  }
}

export class UserToAuthoredQuestionsQueryBase extends AssocEdgeQueryBase<
  User,
  Question,
  UserToAuthoredQuestionsEdge
> {
  constructor(viewer: Viewer, src: EdgeQuerySource<User>) {
    super(
      viewer,
      src,
      userToAuthoredQuestionsCountLoaderFactory,
      userToAuthoredQuestionsDataLoaderFactory,
      Question.loaderOptions(),
    );
  }

  static query<T extends UserToAuthoredQuestionsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<User>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<User>,
  ): T {
    return new this(viewer, src);
  }

  queryAuthors(): QuestionToAuthorsQuery {
    return QuestionToAuthorsQuery.query(this.viewer, this);
  }
}
