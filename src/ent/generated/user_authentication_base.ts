// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerPrivacyPolicy,
  Context,
  CustomQuery,
  Data,
  ID,
  LoadEntOptions,
  ObjectLoaderFactory,
  PrivacyPolicy,
  Viewer,
  convertDate,
  loadCustomData,
  loadCustomEnts,
  loadEnt,
  loadEntViaKey,
  loadEntX,
  loadEntXViaKey,
  loadEnts,
} from "@snowtop/ent";
import { Field, getFields } from "@snowtop/ent/schema";
import { NodeType, User } from "src/ent/internal";
import schema from "src/schema/user_authentication";

const tableName = "user_authentications";
const fields = [
  "id",
  "created_at",
  "updated_at",
  "email_address",
  "password",
  "user_id",
];

export class UserAuthenticationBase {
  readonly nodeType = NodeType.UserAuthentication;
  readonly id: ID;
  readonly createdAt: Date;
  readonly updatedAt: Date;
  readonly emailAddress: string;
  protected readonly password: string;
  readonly userID: ID;

  constructor(public viewer: Viewer, data: Data) {
    this.id = data.id;
    this.createdAt = convertDate(data.created_at);
    this.updatedAt = convertDate(data.updated_at);
    this.emailAddress = data.email_address;
    this.password = data.password;
    this.userID = data.user_id;
  }

  // default privacyPolicy is Viewer can see themselves
  privacyPolicy: PrivacyPolicy = AllowIfViewerPrivacyPolicy;

  static async load<T extends UserAuthenticationBase>(
    this: new (viewer: Viewer, data: Data) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<T | null> {
    return loadEnt(
      viewer,
      id,
      UserAuthenticationBase.loaderOptions.apply(this),
    );
  }

  static async loadX<T extends UserAuthenticationBase>(
    this: new (viewer: Viewer, data: Data) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<T> {
    return loadEntX(
      viewer,
      id,
      UserAuthenticationBase.loaderOptions.apply(this),
    );
  }

  static async loadMany<T extends UserAuthenticationBase>(
    this: new (viewer: Viewer, data: Data) => T,
    viewer: Viewer,
    ...ids: ID[]
  ): Promise<T[]> {
    return loadEnts(
      viewer,
      UserAuthenticationBase.loaderOptions.apply(this),
      ...ids,
    );
  }

  static async loadCustom<T extends UserAuthenticationBase>(
    this: new (viewer: Viewer, data: Data) => T,
    viewer: Viewer,
    query: CustomQuery,
  ): Promise<T[]> {
    return loadCustomEnts(
      viewer,
      UserAuthenticationBase.loaderOptions.apply(this),
      query,
    );
  }

  static async loadCustomData<T extends UserAuthenticationBase>(
    this: new (viewer: Viewer, data: Data) => T,
    query: CustomQuery,
    context?: Context,
  ): Promise<Data[]> {
    return loadCustomData(
      UserAuthenticationBase.loaderOptions.apply(this),
      query,
      context,
    );
  }

  static async loadRawData<T extends UserAuthenticationBase>(
    this: new (viewer: Viewer, data: Data) => T,
    id: ID,
    context?: Context,
  ): Promise<Data | null> {
    return await userAuthenticationLoader.createLoader(context).load(id);
  }

  static async loadRawDataX<T extends UserAuthenticationBase>(
    this: new (viewer: Viewer, data: Data) => T,
    id: ID,
    context?: Context,
  ): Promise<Data> {
    const row = await userAuthenticationLoader.createLoader(context).load(id);
    if (!row) {
      throw new Error(`couldn't load row for ${id}`);
    }
    return row;
  }

  static async loadFromEmailAddress<T extends UserAuthenticationBase>(
    this: new (viewer: Viewer, data: Data) => T,
    viewer: Viewer,
    emailAddress: string,
  ): Promise<T | null> {
    return loadEntViaKey(viewer, emailAddress, {
      ...UserAuthenticationBase.loaderOptions.apply(this),
      loaderFactory: userAuthenticationEmailAddressLoader,
    });
  }

  static async loadFromEmailAddressX<T extends UserAuthenticationBase>(
    this: new (viewer: Viewer, data: Data) => T,
    viewer: Viewer,
    emailAddress: string,
  ): Promise<T> {
    return loadEntXViaKey(viewer, emailAddress, {
      ...UserAuthenticationBase.loaderOptions.apply(this),
      loaderFactory: userAuthenticationEmailAddressLoader,
    });
  }

  static async loadIDFromEmailAddress<T extends UserAuthenticationBase>(
    this: new (viewer: Viewer, data: Data) => T,
    emailAddress: string,
    context?: Context,
  ): Promise<ID | undefined> {
    const row = await userAuthenticationEmailAddressLoader
      .createLoader(context)
      .load(emailAddress);
    return row?.id;
  }

  static async loadRawDataFromEmailAddress<T extends UserAuthenticationBase>(
    this: new (viewer: Viewer, data: Data) => T,
    emailAddress: string,
    context?: Context,
  ): Promise<Data | null> {
    return await userAuthenticationEmailAddressLoader
      .createLoader(context)
      .load(emailAddress);
  }

  static loaderOptions<T extends UserAuthenticationBase>(
    this: new (viewer: Viewer, data: Data) => T,
  ): LoadEntOptions<T> {
    return {
      tableName: tableName,
      fields: fields,
      ent: this,
      loaderFactory: userAuthenticationLoader,
    };
  }

  private static schemaFields: Map<string, Field>;

  private static getSchemaFields(): Map<string, Field> {
    if (UserAuthenticationBase.schemaFields != null) {
      return UserAuthenticationBase.schemaFields;
    }
    return (UserAuthenticationBase.schemaFields = getFields(schema));
  }

  static getField(key: string): Field | undefined {
    return UserAuthenticationBase.getSchemaFields().get(key);
  }

  async loadUser(): Promise<User | null> {
    return loadEnt(this.viewer, this.userID, User.loaderOptions());
  }

  loadUserX(): Promise<User> {
    return loadEntX(this.viewer, this.userID, User.loaderOptions());
  }
}

export const userAuthenticationLoader = new ObjectLoaderFactory({
  tableName,
  fields,
  key: "id",
});

export const userAuthenticationEmailAddressLoader = new ObjectLoaderFactory({
  tableName,
  fields,
  key: "email_address",
});

userAuthenticationLoader.addToPrime(userAuthenticationEmailAddressLoader);
userAuthenticationEmailAddressLoader.addToPrime(userAuthenticationLoader);
