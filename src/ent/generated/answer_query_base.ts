// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AssocEdgeCountLoaderFactory,
  AssocEdgeLoaderFactory,
  AssocEdgeQueryBase,
  EdgeQuerySource,
  Viewer,
} from "@lolopinto/ent";
import {
  Answer,
  AnswerToAuthorsEdge,
  EdgeType,
  User,
  UserToAuthorToAuthoredAnswersQuery,
  UserToAuthorToAuthoredQuestionsQuery,
  UserToAuthoredAnswersQuery,
  UserToAuthoredQuestionsQuery,
} from "src/ent/internal";

export const answerToAuthorsCountLoaderFactory =
  new AssocEdgeCountLoaderFactory(EdgeType.AnswerToAuthors);
export const answerToAuthorsDataLoaderFactory = new AssocEdgeLoaderFactory(
  EdgeType.AnswerToAuthors,
  () => AnswerToAuthorsEdge,
);

export class AnswerToAuthorsQueryBase extends AssocEdgeQueryBase<
  Answer,
  User,
  AnswerToAuthorsEdge
> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Answer>) {
    super(
      viewer,
      src,
      answerToAuthorsCountLoaderFactory,
      answerToAuthorsDataLoaderFactory,
      User.loaderOptions(),
    );
  }

  static query<T extends AnswerToAuthorsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Answer>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Answer>,
  ): T {
    return new this(viewer, src);
  }

  queryAuthorToAuthoredAnswers(): UserToAuthorToAuthoredAnswersQuery {
    return UserToAuthorToAuthoredAnswersQuery.query(this.viewer, this);
  }

  queryAuthorToAuthoredQuestions(): UserToAuthorToAuthoredQuestionsQuery {
    return UserToAuthorToAuthoredQuestionsQuery.query(this.viewer, this);
  }

  queryAuthoredAnswers(): UserToAuthoredAnswersQuery {
    return UserToAuthoredAnswersQuery.query(this.viewer, this);
  }

  queryAuthoredQuestions(): UserToAuthoredQuestionsQuery {
    return UserToAuthoredQuestionsQuery.query(this.viewer, this);
  }
}
