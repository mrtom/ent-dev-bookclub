// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  WriteOperation,
} from "@snowtop/ent/action";
import { Question, QuestionComment, User } from "src/ent/";
import {
  QuestionCommentBuilder,
  QuestionCommentInput,
} from "src/ent/question_comment/actions/question_comment_builder";

export interface QuestionCommentEditInput {
  body?: string;
  questionID?: ID | Builder<Question>;
  authorID?: ID | Builder<User>;
}

export class EditQuestionCommentActionBase implements Action<QuestionComment> {
  public readonly builder: QuestionCommentBuilder;
  public readonly viewer: Viewer;
  protected input: QuestionCommentEditInput;
  protected questionComment: QuestionComment;

  constructor(
    viewer: Viewer,
    questionComment: QuestionComment,
    input: QuestionCommentEditInput,
  ) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new QuestionCommentBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      questionComment,
    );
    this.questionComment = questionComment;
  }

  getPrivacyPolicy(): PrivacyPolicy {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): QuestionCommentInput {
    return this.input;
  }

  async changeset(): Promise<Changeset<QuestionComment>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<QuestionComment | null> {
    await this.builder.save();
    return await this.builder.editedEnt();
  }

  async saveX(): Promise<QuestionComment> {
    await this.builder.saveX();
    return await this.builder.editedEntX();
  }

  static create<T extends EditQuestionCommentActionBase>(
    this: new (
      viewer: Viewer,
      questionComment: QuestionComment,
      input: QuestionCommentEditInput,
    ) => T,
    viewer: Viewer,
    questionComment: QuestionComment,
    input: QuestionCommentEditInput,
  ): EditQuestionCommentActionBase {
    return new this(viewer, questionComment, input);
  }

  static async saveXFromID<T extends EditQuestionCommentActionBase>(
    this: new (
      viewer: Viewer,
      questionComment: QuestionComment,
      input: QuestionCommentEditInput,
    ) => T,
    viewer: Viewer,
    id: ID,
    input: QuestionCommentEditInput,
  ): Promise<QuestionComment> {
    let questionComment = await QuestionComment.loadX(viewer, id);
    return await new this(viewer, questionComment, input).saveX();
  }
}
