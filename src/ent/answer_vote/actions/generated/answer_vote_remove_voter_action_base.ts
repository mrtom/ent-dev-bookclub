// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import { Action, Changeset, WriteOperation } from "@snowtop/ent/action";
import { AnswerVote, User } from "src/ent/";
import {
  AnswerVoteBuilder,
  AnswerVoteInput,
} from "src/ent/answer_vote/actions/answer_vote_builder";

export class AnswerVoteRemoveVoterActionBase implements Action<AnswerVote> {
  public readonly builder: AnswerVoteBuilder;
  public readonly viewer: Viewer;
  protected answerVote: AnswerVote;

  constructor(viewer: Viewer, answerVote: AnswerVote) {
    this.viewer = viewer;
    this.builder = new AnswerVoteBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      answerVote,
    );
    this.answerVote = answerVote;
  }

  getPrivacyPolicy(): PrivacyPolicy {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): AnswerVoteInput {
    return {};
  }

  removeVoter(...ids: ID[]): this;
  removeVoter(...nodes: User[]): this;
  removeVoter(...nodes: ID[] | User[]): this {
    nodes.forEach((node) => this.builder.removeVoter(node));
    return this;
  }
  async changeset(): Promise<Changeset<AnswerVote>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<AnswerVote | null> {
    await this.builder.save();
    return await this.builder.editedEnt();
  }

  async saveX(): Promise<AnswerVote> {
    await this.builder.saveX();
    return await this.builder.editedEntX();
  }

  static create<T extends AnswerVoteRemoveVoterActionBase>(
    this: new (viewer: Viewer, answerVote: AnswerVote) => T,
    viewer: Viewer,
    answerVote: AnswerVote,
  ): AnswerVoteRemoveVoterActionBase {
    return new this(viewer, answerVote);
  }

  static async saveXFromID<T extends AnswerVoteRemoveVoterActionBase>(
    this: new (viewer: Viewer, answerVote: AnswerVote) => T,
    viewer: Viewer,
    id: ID,
    voterID: ID,
  ): Promise<AnswerVote> {
    let answerVote = await AnswerVote.loadX(viewer, id);
    return await new this(viewer, answerVote).removeVoter(voterID).saveX();
  }
}
