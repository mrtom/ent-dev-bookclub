// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  WriteOperation,
} from "@snowtop/ent/action";
import { Answer, AnswerVote, AnswerVoteType } from "src/ent/";
import {
  AnswerVoteBuilder,
  AnswerVoteInput,
} from "src/ent/answer_vote/actions/answer_vote_builder";

export interface AnswerVoteCreateInput {
  answerVoteType: AnswerVoteType;
  answerID: ID | Builder<Answer>;
}

export class CreateAnswerVoteActionBase implements Action<AnswerVote> {
  public readonly builder: AnswerVoteBuilder;
  public readonly viewer: Viewer;
  protected input: AnswerVoteCreateInput;

  constructor(viewer: Viewer, input: AnswerVoteCreateInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new AnswerVoteBuilder(
      this.viewer,
      WriteOperation.Insert,
      this,
    );
  }

  getPrivacyPolicy(): PrivacyPolicy {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): AnswerVoteInput {
    return this.input;
  }

  async changeset(): Promise<Changeset<AnswerVote>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<AnswerVote | null> {
    await this.builder.save();
    return await this.builder.editedEnt();
  }

  async saveX(): Promise<AnswerVote> {
    await this.builder.saveX();
    return await this.builder.editedEntX();
  }

  static create<T extends CreateAnswerVoteActionBase>(
    this: new (viewer: Viewer, input: AnswerVoteCreateInput) => T,
    viewer: Viewer,
    input: AnswerVoteCreateInput,
  ): CreateAnswerVoteActionBase {
    return new this(viewer, input);
  }
}
