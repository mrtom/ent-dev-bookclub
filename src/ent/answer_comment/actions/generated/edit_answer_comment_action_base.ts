// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  WriteOperation,
} from "@snowtop/ent/action";
import { Answer, AnswerComment, User } from "src/ent/";
import {
  AnswerCommentBuilder,
  AnswerCommentInput,
} from "src/ent/answer_comment/actions/answer_comment_builder";

export interface AnswerCommentEditInput {
  body?: string;
  answerID?: ID | Builder<Answer>;
  authorID?: ID | Builder<User>;
}

export class EditAnswerCommentActionBase implements Action<AnswerComment> {
  public readonly builder: AnswerCommentBuilder;
  public readonly viewer: Viewer;
  protected input: AnswerCommentEditInput;
  protected answerComment: AnswerComment;

  constructor(
    viewer: Viewer,
    answerComment: AnswerComment,
    input: AnswerCommentEditInput,
  ) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new AnswerCommentBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      answerComment,
    );
    this.answerComment = answerComment;
  }

  getPrivacyPolicy(): PrivacyPolicy {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): AnswerCommentInput {
    return this.input;
  }

  async changeset(): Promise<Changeset<AnswerComment>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<AnswerComment | null> {
    await this.builder.save();
    return await this.builder.editedEnt();
  }

  async saveX(): Promise<AnswerComment> {
    await this.builder.saveX();
    return await this.builder.editedEntX();
  }

  static create<T extends EditAnswerCommentActionBase>(
    this: new (
      viewer: Viewer,
      answerComment: AnswerComment,
      input: AnswerCommentEditInput,
    ) => T,
    viewer: Viewer,
    answerComment: AnswerComment,
    input: AnswerCommentEditInput,
  ): EditAnswerCommentActionBase {
    return new this(viewer, answerComment, input);
  }

  static async saveXFromID<T extends EditAnswerCommentActionBase>(
    this: new (
      viewer: Viewer,
      answerComment: AnswerComment,
      input: AnswerCommentEditInput,
    ) => T,
    viewer: Viewer,
    id: ID,
    input: AnswerCommentEditInput,
  ): Promise<AnswerComment> {
    let answerComment = await AnswerComment.loadX(viewer, id);
    return await new this(viewer, answerComment, input).saveX();
  }
}
