// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import { Action, Changeset, WriteOperation } from "@snowtop/ent/action";
import { Answer } from "src/ent/";
import {
  AnswerBuilder,
  AnswerInput,
} from "src/ent/answer/actions/answer_builder";

export class DeleteAnswerActionBase implements Action<Answer> {
  public readonly builder: AnswerBuilder;
  public readonly viewer: Viewer;
  protected answer: Answer;

  constructor(viewer: Viewer, answer: Answer) {
    this.viewer = viewer;
    this.builder = new AnswerBuilder(
      this.viewer,
      WriteOperation.Delete,
      this,
      answer,
    );
    this.answer = answer;
  }

  getPrivacyPolicy(): PrivacyPolicy {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): AnswerInput {
    return {};
  }

  async changeset(): Promise<Changeset<Answer>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<void> {
    await this.builder.save();
  }

  async saveX(): Promise<void> {
    await this.builder.saveX();
  }

  static create<T extends DeleteAnswerActionBase>(
    this: new (viewer: Viewer, answer: Answer) => T,
    viewer: Viewer,
    answer: Answer,
  ): DeleteAnswerActionBase {
    return new this(viewer, answer);
  }

  static async saveXFromID<T extends DeleteAnswerActionBase>(
    this: new (viewer: Viewer, answer: Answer) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<void> {
    let answer = await Answer.loadX(viewer, id);
    return await new this(viewer, answer).saveX();
  }
}
