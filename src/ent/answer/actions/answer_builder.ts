// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import { AssocEdgeInputOptions, Ent, ID, Viewer } from "@lolopinto/ent";
import {
  Action,
  Builder,
  Changeset,
  Orchestrator,
  WriteOperation,
  saveBuilder,
  saveBuilderX,
} from "@lolopinto/ent/action";
import { Answer, Question, User } from "src/ent/";
import { EdgeType, NodeType } from "src/ent/const";
import schema from "src/schema/answer";

export interface AnswerInput {
  body?: string;
  acceptedAnswer?: boolean;
  questionID?: ID | Builder<Question>;
  authorID?: ID | Builder<User>;
}

export interface AnswerAction extends Action<Answer> {
  getInput(): AnswerInput;
}

function randomNum(): string {
  return Math.random().toString(10).substring(2);
}

export class AnswerBuilder implements Builder<Answer> {
  orchestrator: Orchestrator<Answer>;
  readonly placeholderID: ID;
  readonly ent = Answer;
  private input: AnswerInput;

  public constructor(
    public readonly viewer: Viewer,
    public readonly operation: WriteOperation,
    action: AnswerAction,
    public readonly existingEnt?: Answer | undefined,
  ) {
    this.placeholderID = `$ent.idPlaceholderID$ ${randomNum()}-Answer`;
    this.input = action.getInput();

    this.orchestrator = new Orchestrator({
      viewer: viewer,
      operation: this.operation,
      tableName: "answers",
      key: "id",
      loaderOptions: Answer.loaderOptions(),
      builder: this,
      action: action,
      schema: schema,
      editedFields: () => {
        return this.getEditedFields.apply(this);
      },
    });
  }

  getInput(): AnswerInput {
    return this.input;
  }

  updateInput(input: AnswerInput) {
    // override input
    this.input = {
      ...this.input,
      ...input,
    };
  }

  // this gets the inputs that have been written for a given edgeType and operation
  // WriteOperation.Insert for adding an edge and WriteOperation.Delete for deleting an edge
  getEdgeInputData(edgeType: EdgeType, op: WriteOperation) {
    return this.orchestrator.getInputEdges(edgeType, op);
  }

  clearInputEdges(edgeType: EdgeType, op: WriteOperation, id?: ID) {
    this.orchestrator.clearInputEdges(edgeType, op, id);
  }
  addAuthor(...ids: ID[]): AnswerBuilder;
  addAuthor(...nodes: User[]): AnswerBuilder;
  addAuthor(...nodes: Builder<User>[]): AnswerBuilder;
  addAuthor(...nodes: ID[] | User[] | Builder<User>[]): AnswerBuilder {
    for (const node of nodes) {
      if (this.isBuilder(node)) {
        this.addAuthorID(node);
      } else if (typeof node === "object") {
        this.addAuthorID(node.id);
      } else {
        this.addAuthorID(node);
      }
    }
    return this;
  }

  addAuthorID(
    id: ID | Builder<User>,
    options?: AssocEdgeInputOptions,
  ): AnswerBuilder {
    this.orchestrator.addOutboundEdge(
      id,
      EdgeType.AnswerToAuthors,
      NodeType.User,
      options,
    );
    return this;
  }

  removeAuthor(...ids: ID[]): AnswerBuilder;
  removeAuthor(...nodes: User[]): AnswerBuilder;
  removeAuthor(...nodes: ID[] | User[]): AnswerBuilder {
    for (const node of nodes) {
      if (typeof node === "object") {
        this.orchestrator.removeOutboundEdge(node.id, EdgeType.AnswerToAuthors);
      } else {
        this.orchestrator.removeOutboundEdge(node, EdgeType.AnswerToAuthors);
      }
    }
    return this;
  }

  async build(): Promise<Changeset<Answer>> {
    return this.orchestrator.build();
  }

  async valid(): Promise<boolean> {
    return this.orchestrator.valid();
  }

  async validX(): Promise<void> {
    return this.orchestrator.validX();
  }

  async save(): Promise<void> {
    await saveBuilder(this);
  }

  async saveX(): Promise<void> {
    await saveBuilderX(this);
  }

  async editedEnt(): Promise<Answer | null> {
    return await this.orchestrator.editedEnt();
  }

  async editedEntX(): Promise<Answer> {
    return await this.orchestrator.editedEntX();
  }

  private getEditedFields(): Map<string, any> {
    const fields = this.input;

    let result = new Map<string, any>();

    const addField = function (key: string, value: any) {
      if (value !== undefined) {
        result.set(key, value);
      }
    };
    addField("body", fields.body);
    addField("acceptedAnswer", fields.acceptedAnswer);
    addField("questionID", fields.questionID);
    if (fields.questionID) {
      this.orchestrator.addInboundEdge(
        fields.questionID,
        EdgeType.QuestionToAnswers,
        NodeType.Question,
      );
    }
    addField("authorID", fields.authorID);
    if (fields.authorID) {
      this.orchestrator.addInboundEdge(
        fields.authorID,
        EdgeType.UserToAuthoredAnswers,
        NodeType.User,
      );
    }
    return result;
  }

  isBuilder(node: ID | Ent | Builder<Ent>): node is Builder<Ent> {
    return (node as Builder<Ent>).placeholderID !== undefined;
  }

  // get value of body. Retrieves it from the input if specified or takes it from existingEnt
  getNewBodyValue(): string | undefined {
    return this.input.body || this.existingEnt?.body;
  }

  // get value of acceptedAnswer. Retrieves it from the input if specified or takes it from existingEnt
  getNewAcceptedAnswerValue(): boolean | undefined {
    return this.input.acceptedAnswer || this.existingEnt?.acceptedAnswer;
  }

  // get value of questionID. Retrieves it from the input if specified or takes it from existingEnt
  getNewQuestionIDValue(): ID | Builder<Question> | undefined {
    return this.input.questionID || this.existingEnt?.questionID;
  }

  // get value of authorID. Retrieves it from the input if specified or takes it from existingEnt
  getNewAuthorIDValue(): ID | Builder<User> | undefined {
    return this.input.authorID || this.existingEnt?.authorID;
  }
}
