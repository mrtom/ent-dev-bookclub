// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { AnswerVote } from "src/ent/";
import DeleteAnswerVoteAction from "src/ent/answer_vote/actions/delete_answer_vote_action";

interface customAnswerVoteDeleteInput {
  answerVoteID: string;
}

interface AnswerVoteDeletePayload {
  deletedAnswerVoteID: string;
}

export const AnswerVoteDeleteInputType = new GraphQLInputObjectType({
  name: "AnswerVoteDeleteInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    answerVoteID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const AnswerVoteDeletePayloadType = new GraphQLObjectType({
  name: "AnswerVoteDeletePayload",
  fields: (): GraphQLFieldConfigMap<
    AnswerVoteDeletePayload,
    RequestContext
  > => ({
    deletedAnswerVoteID: {
      type: GraphQLID,
    },
  }),
});

export const AnswerVoteDeleteType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customAnswerVoteDeleteInput }
> = {
  type: GraphQLNonNull(AnswerVoteDeletePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(AnswerVoteDeleteInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<AnswerVoteDeletePayload> => {
    await DeleteAnswerVoteAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.answerVoteID),
    );
    return { deletedAnswerVoteID: input.answerVoteID };
  },
};
