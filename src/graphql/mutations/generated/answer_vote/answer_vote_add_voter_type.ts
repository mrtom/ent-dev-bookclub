// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { AnswerVote } from "src/ent/";
import AnswerVoteAddVoterAction from "src/ent/answer_vote/actions/answer_vote_add_voter_action";
import { AnswerVoteType } from "src/graphql/resolvers/";

interface customAnswerVoteAddVoterInput {
  answerVoteID: string;
  voterID: string;
}

interface AnswerVoteAddVoterPayload {
  answerVote: AnswerVote;
}

export const AnswerVoteAddVoterInputType = new GraphQLInputObjectType({
  name: "AnswerVoteAddVoterInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    answerVoteID: {
      type: GraphQLNonNull(GraphQLID),
    },
    voterID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const AnswerVoteAddVoterPayloadType = new GraphQLObjectType({
  name: "AnswerVoteAddVoterPayload",
  fields: (): GraphQLFieldConfigMap<
    AnswerVoteAddVoterPayload,
    RequestContext
  > => ({
    answerVote: {
      type: GraphQLNonNull(AnswerVoteType),
    },
  }),
});

export const AnswerVoteAddVoterType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customAnswerVoteAddVoterInput }
> = {
  type: GraphQLNonNull(AnswerVoteAddVoterPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(AnswerVoteAddVoterInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<AnswerVoteAddVoterPayload> => {
    let answerVote = await AnswerVoteAddVoterAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.answerVoteID),
      mustDecodeIDFromGQLID(input.voterID),
    );
    return { answerVote: answerVote };
  },
};
