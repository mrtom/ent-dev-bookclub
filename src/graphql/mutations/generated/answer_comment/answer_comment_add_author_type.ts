// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@lolopinto/ent";
import { mustDecodeIDFromGQLID } from "@lolopinto/ent/graphql";
import { AnswerComment } from "src/ent/";
import AnswerCommentAddAuthorAction from "src/ent/answer_comment/actions/answer_comment_add_author_action";
import { AnswerCommentType } from "src/graphql/resolvers/";

interface customAnswerCommentAddAuthorInput {
  answerCommentID: string;
  authorID: string;
}

interface AnswerCommentAddAuthorPayload {
  answerComment: AnswerComment;
}

export const AnswerCommentAddAuthorInputType = new GraphQLInputObjectType({
  name: "AnswerCommentAddAuthorInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    answerCommentID: {
      type: GraphQLNonNull(GraphQLID),
    },
    authorID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const AnswerCommentAddAuthorPayloadType = new GraphQLObjectType({
  name: "AnswerCommentAddAuthorPayload",
  fields: (): GraphQLFieldConfigMap<
    AnswerCommentAddAuthorPayload,
    RequestContext
  > => ({
    answerComment: {
      type: GraphQLNonNull(AnswerCommentType),
    },
  }),
});

export const AnswerCommentAddAuthorType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customAnswerCommentAddAuthorInput }
> = {
  type: GraphQLNonNull(AnswerCommentAddAuthorPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(AnswerCommentAddAuthorInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<AnswerCommentAddAuthorPayload> => {
    let answerComment = await AnswerCommentAddAuthorAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.answerCommentID),
      mustDecodeIDFromGQLID(input.authorID),
    );
    return { answerComment: answerComment };
  },
};
