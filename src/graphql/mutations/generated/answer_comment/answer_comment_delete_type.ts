// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@lolopinto/ent";
import { mustDecodeIDFromGQLID } from "@lolopinto/ent/graphql";
import { AnswerComment } from "src/ent/";
import DeleteAnswerCommentAction from "src/ent/answer_comment/actions/delete_answer_comment_action";

interface customAnswerCommentDeleteInput {
  answerCommentID: string;
}

interface AnswerCommentDeletePayload {
  deletedAnswerCommentID: string;
}

export const AnswerCommentDeleteInputType = new GraphQLInputObjectType({
  name: "AnswerCommentDeleteInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    answerCommentID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const AnswerCommentDeletePayloadType = new GraphQLObjectType({
  name: "AnswerCommentDeletePayload",
  fields: (): GraphQLFieldConfigMap<
    AnswerCommentDeletePayload,
    RequestContext
  > => ({
    deletedAnswerCommentID: {
      type: GraphQLID,
    },
  }),
});

export const AnswerCommentDeleteType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customAnswerCommentDeleteInput }
> = {
  type: GraphQLNonNull(AnswerCommentDeletePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(AnswerCommentDeleteInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<AnswerCommentDeletePayload> => {
    await DeleteAnswerCommentAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.answerCommentID),
    );
    return { deletedAnswerCommentID: input.answerCommentID };
  },
};
