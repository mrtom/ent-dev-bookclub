// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { AnswerComment } from "src/ent/";
import EditAnswerCommentAction, {
  AnswerCommentEditInput,
} from "src/ent/answer_comment/actions/edit_answer_comment_action";
import { AnswerCommentType } from "src/graphql/resolvers/";

interface customAnswerCommentEditInput extends AnswerCommentEditInput {
  answerCommentID: string;
  answerID: string;
  authorID: string;
}

interface AnswerCommentEditPayload {
  answerComment: AnswerComment;
}

export const AnswerCommentEditInputType = new GraphQLInputObjectType({
  name: "AnswerCommentEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    answerCommentID: {
      type: GraphQLNonNull(GraphQLID),
    },
    body: {
      type: GraphQLString,
    },
    answerID: {
      type: GraphQLID,
    },
    authorID: {
      type: GraphQLID,
    },
  }),
});

export const AnswerCommentEditPayloadType = new GraphQLObjectType({
  name: "AnswerCommentEditPayload",
  fields: (): GraphQLFieldConfigMap<
    AnswerCommentEditPayload,
    RequestContext
  > => ({
    answerComment: {
      type: GraphQLNonNull(AnswerCommentType),
    },
  }),
});

export const AnswerCommentEditType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customAnswerCommentEditInput }
> = {
  type: GraphQLNonNull(AnswerCommentEditPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(AnswerCommentEditInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<AnswerCommentEditPayload> => {
    let answerComment = await EditAnswerCommentAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.answerCommentID),
      {
        body: input.body,
      },
    );
    return { answerComment: answerComment };
  },
};
