// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { QuestionVote } from "src/ent/";
import QuestionVoteAddVoterAction from "src/ent/question_vote/actions/question_vote_add_voter_action";
import { QuestionVoteType } from "src/graphql/resolvers/";

interface customQuestionVoteAddVoterInput {
  questionVoteID: string;
  voterID: string;
}

interface QuestionVoteAddVoterPayload {
  questionVote: QuestionVote;
}

export const QuestionVoteAddVoterInputType = new GraphQLInputObjectType({
  name: "QuestionVoteAddVoterInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    questionVoteID: {
      type: GraphQLNonNull(GraphQLID),
    },
    voterID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const QuestionVoteAddVoterPayloadType = new GraphQLObjectType({
  name: "QuestionVoteAddVoterPayload",
  fields: (): GraphQLFieldConfigMap<
    QuestionVoteAddVoterPayload,
    RequestContext
  > => ({
    questionVote: {
      type: GraphQLNonNull(QuestionVoteType),
    },
  }),
});

export const QuestionVoteAddVoterType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customQuestionVoteAddVoterInput }
> = {
  type: GraphQLNonNull(QuestionVoteAddVoterPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(QuestionVoteAddVoterInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<QuestionVoteAddVoterPayload> => {
    let questionVote = await QuestionVoteAddVoterAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.questionVoteID),
      mustDecodeIDFromGQLID(input.voterID),
    );
    return { questionVote: questionVote };
  },
};
