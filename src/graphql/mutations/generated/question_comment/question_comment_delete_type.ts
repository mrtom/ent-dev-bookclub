// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@lolopinto/ent";
import { mustDecodeIDFromGQLID } from "@lolopinto/ent/graphql";
import { QuestionComment } from "src/ent/";
import DeleteQuestionCommentAction from "src/ent/question_comment/actions/delete_question_comment_action";

interface customQuestionCommentDeleteInput {
  questionCommentID: string;
}

interface QuestionCommentDeletePayload {
  deletedQuestionCommentID: string;
}

export const QuestionCommentDeleteInputType = new GraphQLInputObjectType({
  name: "QuestionCommentDeleteInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    questionCommentID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const QuestionCommentDeletePayloadType = new GraphQLObjectType({
  name: "QuestionCommentDeletePayload",
  fields: (): GraphQLFieldConfigMap<
    QuestionCommentDeletePayload,
    RequestContext
  > => ({
    deletedQuestionCommentID: {
      type: GraphQLID,
    },
  }),
});

export const QuestionCommentDeleteType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customQuestionCommentDeleteInput }
> = {
  type: GraphQLNonNull(QuestionCommentDeletePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(QuestionCommentDeleteInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<QuestionCommentDeletePayload> => {
    await DeleteQuestionCommentAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.questionCommentID),
    );
    return { deletedQuestionCommentID: input.questionCommentID };
  },
};
