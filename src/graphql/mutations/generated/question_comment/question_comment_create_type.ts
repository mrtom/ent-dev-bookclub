// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { QuestionComment } from "src/ent/";
import CreateQuestionCommentAction, {
  QuestionCommentCreateInput,
} from "src/ent/question_comment/actions/create_question_comment_action";
import { QuestionCommentType } from "src/graphql/resolvers/";

interface customQuestionCommentCreateInput extends QuestionCommentCreateInput {
  questionID: string;
}

interface QuestionCommentCreatePayload {
  questionComment: QuestionComment;
}

export const QuestionCommentCreateInputType = new GraphQLInputObjectType({
  name: "QuestionCommentCreateInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    body: {
      type: GraphQLNonNull(GraphQLString),
    },
    questionID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const QuestionCommentCreatePayloadType = new GraphQLObjectType({
  name: "QuestionCommentCreatePayload",
  fields: (): GraphQLFieldConfigMap<
    QuestionCommentCreatePayload,
    RequestContext
  > => ({
    questionComment: {
      type: GraphQLNonNull(QuestionCommentType),
    },
  }),
});

export const QuestionCommentCreateType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customQuestionCommentCreateInput }
> = {
  type: GraphQLNonNull(QuestionCommentCreatePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(QuestionCommentCreateInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<QuestionCommentCreatePayload> => {
    let questionComment = await CreateQuestionCommentAction.create(
      context.getViewer(),
      {
        body: input.body,
        questionID: mustDecodeIDFromGQLID(input.questionID),
      },
    ).saveX();
    return { questionComment: questionComment };
  },
};
