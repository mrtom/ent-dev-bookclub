// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@lolopinto/ent";
import { mustDecodeIDFromGQLID } from "@lolopinto/ent/graphql";
import { QuestionComment } from "src/ent/";
import QuestionCommentRemoveAuthorAction from "src/ent/question_comment/actions/question_comment_remove_author_action";
import { QuestionCommentType } from "src/graphql/resolvers/";

interface customQuestionCommentRemoveAuthorInput {
  questionCommentID: string;
  authorID: string;
}

interface QuestionCommentRemoveAuthorPayload {
  questionComment: QuestionComment;
}

export const QuestionCommentRemoveAuthorInputType = new GraphQLInputObjectType({
  name: "QuestionCommentRemoveAuthorInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    questionCommentID: {
      type: GraphQLNonNull(GraphQLID),
    },
    authorID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const QuestionCommentRemoveAuthorPayloadType = new GraphQLObjectType({
  name: "QuestionCommentRemoveAuthorPayload",
  fields: (): GraphQLFieldConfigMap<
    QuestionCommentRemoveAuthorPayload,
    RequestContext
  > => ({
    questionComment: {
      type: GraphQLNonNull(QuestionCommentType),
    },
  }),
});

export const QuestionCommentRemoveAuthorType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customQuestionCommentRemoveAuthorInput }
> = {
  type: GraphQLNonNull(QuestionCommentRemoveAuthorPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(QuestionCommentRemoveAuthorInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<QuestionCommentRemoveAuthorPayload> => {
    let questionComment = await QuestionCommentRemoveAuthorAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.questionCommentID),
      mustDecodeIDFromGQLID(input.authorID),
    );
    return { questionComment: questionComment };
  },
};
