// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLBoolean,
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { Question } from "src/ent/";
import EditQuestionAnsweredAction, {
  EditQuestionAnsweredInput,
} from "src/ent/question/actions/edit_question_answered_action";
import { QuestionType } from "src/graphql/resolvers/";

interface customQuestionAnsweredEditInput extends EditQuestionAnsweredInput {
  questionID: string;
}

interface QuestionAnsweredEditPayload {
  question: Question;
}

export const QuestionAnsweredEditInputType = new GraphQLInputObjectType({
  name: "QuestionAnsweredEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    questionID: {
      type: GraphQLNonNull(GraphQLID),
    },
    answered: {
      type: GraphQLNonNull(GraphQLBoolean),
    },
  }),
});

export const QuestionAnsweredEditPayloadType = new GraphQLObjectType({
  name: "QuestionAnsweredEditPayload",
  fields: (): GraphQLFieldConfigMap<
    QuestionAnsweredEditPayload,
    RequestContext
  > => ({
    question: {
      type: GraphQLNonNull(QuestionType),
    },
  }),
});

export const QuestionAnsweredEditType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customQuestionAnsweredEditInput }
> = {
  type: GraphQLNonNull(QuestionAnsweredEditPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(QuestionAnsweredEditInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<QuestionAnsweredEditPayload> => {
    let question = await EditQuestionAnsweredAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.questionID),
      {
        answered: input.answered,
      },
    );
    return { question: question };
  },
};
