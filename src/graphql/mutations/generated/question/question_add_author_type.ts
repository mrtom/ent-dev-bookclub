// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { Question } from "src/ent/";
import QuestionAddAuthorAction from "src/ent/question/actions/question_add_author_action";
import { QuestionType } from "src/graphql/resolvers/";

interface customQuestionAddAuthorInput {
  questionID: string;
  authorID: string;
}

interface QuestionAddAuthorPayload {
  question: Question;
}

export const QuestionAddAuthorInputType = new GraphQLInputObjectType({
  name: "QuestionAddAuthorInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    questionID: {
      type: GraphQLNonNull(GraphQLID),
    },
    authorID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const QuestionAddAuthorPayloadType = new GraphQLObjectType({
  name: "QuestionAddAuthorPayload",
  fields: (): GraphQLFieldConfigMap<
    QuestionAddAuthorPayload,
    RequestContext
  > => ({
    question: {
      type: GraphQLNonNull(QuestionType),
    },
  }),
});

export const QuestionAddAuthorType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customQuestionAddAuthorInput }
> = {
  type: GraphQLNonNull(QuestionAddAuthorPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(QuestionAddAuthorInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<QuestionAddAuthorPayload> => {
    let question = await QuestionAddAuthorAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.questionID),
      mustDecodeIDFromGQLID(input.authorID),
    );
    return { question: question };
  },
};
