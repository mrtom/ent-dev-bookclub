// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@lolopinto/ent";
import { mustDecodeIDFromGQLID } from "@lolopinto/ent/graphql";
import { Question } from "src/ent/";
import CreateQuestionAction, {
  QuestionCreateInput,
} from "src/ent/question/actions/create_question_action";
import { QuestionType } from "src/graphql/resolvers/";

interface customQuestionCreateInput extends QuestionCreateInput {
  authorID: string;
}

interface QuestionCreatePayload {
  question: Question;
}

export const QuestionCreateInputType = new GraphQLInputObjectType({
  name: "QuestionCreateInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    title: {
      type: GraphQLNonNull(GraphQLString),
    },
    questionBody: {
      type: GraphQLNonNull(GraphQLString),
    },
    authorID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const QuestionCreatePayloadType = new GraphQLObjectType({
  name: "QuestionCreatePayload",
  fields: (): GraphQLFieldConfigMap<QuestionCreatePayload, RequestContext> => ({
    question: {
      type: GraphQLNonNull(QuestionType),
    },
  }),
});

export const QuestionCreateType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customQuestionCreateInput }
> = {
  type: GraphQLNonNull(QuestionCreatePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(QuestionCreateInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<QuestionCreatePayload> => {
    let question = await CreateQuestionAction.create(context.getViewer(), {
      title: input.title,
      questionBody: input.questionBody,
      authorID: mustDecodeIDFromGQLID(input.authorID),
    }).saveX();
    return { question: question };
  },
};
