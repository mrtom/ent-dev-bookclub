// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@lolopinto/ent";
import { mustDecodeIDFromGQLID } from "@lolopinto/ent/graphql";
import { QuestionPrivateNote } from "src/ent/";
import QuestionPrivateNoteAddAuthorAction from "src/ent/question_private_note/actions/question_private_note_add_author_action";
import { QuestionPrivateNoteType } from "src/graphql/resolvers/";

interface customQuestionPrivateNoteAddAuthorInput {
  questionPrivateNoteID: string;
  authorID: string;
}

interface QuestionPrivateNoteAddAuthorPayload {
  questionPrivateNote: QuestionPrivateNote;
}

export const QuestionPrivateNoteAddAuthorInputType = new GraphQLInputObjectType(
  {
    name: "QuestionPrivateNoteAddAuthorInput",
    fields: (): GraphQLInputFieldConfigMap => ({
      questionPrivateNoteID: {
        type: GraphQLNonNull(GraphQLID),
      },
      authorID: {
        type: GraphQLNonNull(GraphQLID),
      },
    }),
  },
);

export const QuestionPrivateNoteAddAuthorPayloadType = new GraphQLObjectType({
  name: "QuestionPrivateNoteAddAuthorPayload",
  fields: (): GraphQLFieldConfigMap<
    QuestionPrivateNoteAddAuthorPayload,
    RequestContext
  > => ({
    questionPrivateNote: {
      type: GraphQLNonNull(QuestionPrivateNoteType),
    },
  }),
});

export const QuestionPrivateNoteAddAuthorType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customQuestionPrivateNoteAddAuthorInput }
> = {
  type: GraphQLNonNull(QuestionPrivateNoteAddAuthorPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(QuestionPrivateNoteAddAuthorInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<QuestionPrivateNoteAddAuthorPayload> => {
    let questionPrivateNote =
      await QuestionPrivateNoteAddAuthorAction.saveXFromID(
        context.getViewer(),
        mustDecodeIDFromGQLID(input.questionPrivateNoteID),
        mustDecodeIDFromGQLID(input.authorID),
      );
    return { questionPrivateNote: questionPrivateNote };
  },
};
