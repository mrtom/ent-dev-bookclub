// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { QuestionPrivateNote } from "src/ent/";
import EditQuestionPrivateNoteAction, {
  QuestionPrivateNoteEditInput,
} from "src/ent/question_private_note/actions/edit_question_private_note_action";
import { QuestionPrivateNoteType } from "src/graphql/resolvers/";

interface customQuestionPrivateNoteEditInput
  extends QuestionPrivateNoteEditInput {
  questionPrivateNoteID: string;
  questionID: string;
  authorID: string;
}

interface QuestionPrivateNoteEditPayload {
  questionPrivateNote: QuestionPrivateNote;
}

export const QuestionPrivateNoteEditInputType = new GraphQLInputObjectType({
  name: "QuestionPrivateNoteEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    questionPrivateNoteID: {
      type: GraphQLNonNull(GraphQLID),
    },
    body: {
      type: GraphQLString,
    },
    questionID: {
      type: GraphQLID,
    },
    authorID: {
      type: GraphQLID,
    },
  }),
});

export const QuestionPrivateNoteEditPayloadType = new GraphQLObjectType({
  name: "QuestionPrivateNoteEditPayload",
  fields: (): GraphQLFieldConfigMap<
    QuestionPrivateNoteEditPayload,
    RequestContext
  > => ({
    questionPrivateNote: {
      type: GraphQLNonNull(QuestionPrivateNoteType),
    },
  }),
});

export const QuestionPrivateNoteEditType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customQuestionPrivateNoteEditInput }
> = {
  type: GraphQLNonNull(QuestionPrivateNoteEditPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(QuestionPrivateNoteEditInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<QuestionPrivateNoteEditPayload> => {
    let questionPrivateNote = await EditQuestionPrivateNoteAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.questionPrivateNoteID),
      {
        body: input.body,
      },
    );
    return { questionPrivateNote: questionPrivateNote };
  },
};
