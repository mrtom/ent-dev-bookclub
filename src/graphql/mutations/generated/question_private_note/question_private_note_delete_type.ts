// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@lolopinto/ent";
import { mustDecodeIDFromGQLID } from "@lolopinto/ent/graphql";
import { QuestionPrivateNote } from "src/ent/";
import DeleteQuestionPrivateNoteAction from "src/ent/question_private_note/actions/delete_question_private_note_action";

interface customQuestionPrivateNoteDeleteInput {
  questionPrivateNoteID: string;
}

interface QuestionPrivateNoteDeletePayload {
  deletedQuestionPrivateNoteID: string;
}

export const QuestionPrivateNoteDeleteInputType = new GraphQLInputObjectType({
  name: "QuestionPrivateNoteDeleteInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    questionPrivateNoteID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const QuestionPrivateNoteDeletePayloadType = new GraphQLObjectType({
  name: "QuestionPrivateNoteDeletePayload",
  fields: (): GraphQLFieldConfigMap<
    QuestionPrivateNoteDeletePayload,
    RequestContext
  > => ({
    deletedQuestionPrivateNoteID: {
      type: GraphQLID,
    },
  }),
});

export const QuestionPrivateNoteDeleteType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customQuestionPrivateNoteDeleteInput }
> = {
  type: GraphQLNonNull(QuestionPrivateNoteDeletePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(QuestionPrivateNoteDeleteInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<QuestionPrivateNoteDeletePayload> => {
    await DeleteQuestionPrivateNoteAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.questionPrivateNoteID),
    );
    return { deletedQuestionPrivateNoteID: input.questionPrivateNoteID };
  },
};
