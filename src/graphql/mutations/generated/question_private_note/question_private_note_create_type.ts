// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@lolopinto/ent";
import { mustDecodeIDFromGQLID } from "@lolopinto/ent/graphql";
import { QuestionPrivateNote } from "src/ent/";
import CreateQuestionPrivateNoteAction, {
  QuestionPrivateNoteCreateInput,
} from "src/ent/question_private_note/actions/create_question_private_note_action";
import { QuestionPrivateNoteType } from "src/graphql/resolvers/";

interface customQuestionPrivateNoteCreateInput
  extends QuestionPrivateNoteCreateInput {
  questionID: string;
  authorID: string;
}

interface QuestionPrivateNoteCreatePayload {
  questionPrivateNote: QuestionPrivateNote;
}

export const QuestionPrivateNoteCreateInputType = new GraphQLInputObjectType({
  name: "QuestionPrivateNoteCreateInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    body: {
      type: GraphQLNonNull(GraphQLString),
    },
    questionID: {
      type: GraphQLNonNull(GraphQLID),
    },
    authorID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const QuestionPrivateNoteCreatePayloadType = new GraphQLObjectType({
  name: "QuestionPrivateNoteCreatePayload",
  fields: (): GraphQLFieldConfigMap<
    QuestionPrivateNoteCreatePayload,
    RequestContext
  > => ({
    questionPrivateNote: {
      type: GraphQLNonNull(QuestionPrivateNoteType),
    },
  }),
});

export const QuestionPrivateNoteCreateType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customQuestionPrivateNoteCreateInput }
> = {
  type: GraphQLNonNull(QuestionPrivateNoteCreatePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(QuestionPrivateNoteCreateInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<QuestionPrivateNoteCreatePayload> => {
    let questionPrivateNote = await CreateQuestionPrivateNoteAction.create(
      context.getViewer(),
      {
        body: input.body,
        questionID: mustDecodeIDFromGQLID(input.questionID),
        authorID: mustDecodeIDFromGQLID(input.authorID),
      },
    ).saveX();
    return { questionPrivateNote: questionPrivateNote };
  },
};
