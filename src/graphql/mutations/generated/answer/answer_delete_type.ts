// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@lolopinto/ent";
import { mustDecodeIDFromGQLID } from "@lolopinto/ent/graphql";
import { Answer } from "src/ent/";
import DeleteAnswerAction from "src/ent/answer/actions/delete_answer_action";

interface customAnswerDeleteInput {
  answerID: string;
}

interface AnswerDeletePayload {
  deletedAnswerID: string;
}

export const AnswerDeleteInputType = new GraphQLInputObjectType({
  name: "AnswerDeleteInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    answerID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const AnswerDeletePayloadType = new GraphQLObjectType({
  name: "AnswerDeletePayload",
  fields: (): GraphQLFieldConfigMap<AnswerDeletePayload, RequestContext> => ({
    deletedAnswerID: {
      type: GraphQLID,
    },
  }),
});

export const AnswerDeleteType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customAnswerDeleteInput }
> = {
  type: GraphQLNonNull(AnswerDeletePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(AnswerDeleteInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<AnswerDeletePayload> => {
    await DeleteAnswerAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.answerID),
    );
    return { deletedAnswerID: input.answerID };
  },
};
