type Answer implements Node {
  author: User
  question: Question
  id: ID!
  body: String!
  acceptedAnswer: Boolean!
  authors(first: Int, after: String, last: Int, before: String): AnswerToAuthorsConnection!
}

"""node interface"""
interface Node {
  id: ID!
}

type Question implements Node {
  author: User
  id: ID!
  title: String!
  questionBody: String!
  answers(first: Int, after: String, last: Int, before: String): QuestionToAnswersConnection!
  authors(first: Int, after: String, last: Int, before: String): QuestionToAuthorsConnection!
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  emailAddress: String!
  authorToAuthoredAnswers(first: Int, after: String, last: Int, before: String): UserToAuthorToAuthoredAnswersConnection!
  authorToAuthoredQuestions(first: Int, after: String, last: Int, before: String): UserToAuthorToAuthoredQuestionsConnection!
  authoredAnswers(first: Int, after: String, last: Int, before: String): UserToAuthoredAnswersConnection!
  authoredQuestions(first: Int, after: String, last: Int, before: String): UserToAuthoredQuestionsConnection!
  howLong: Int!
}

type AnswerToAuthorsConnection implements Connection {
  edges: [AnswerToAuthorsEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

"""connection interface"""
interface Connection {
  edges: [Edge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
}

"""edge interface"""
interface Edge {
  node: Node!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type AnswerToAuthorsEdge implements Edge {
  node: User!
  cursor: String!
}

type QuestionToAnswersConnection implements Connection {
  edges: [QuestionToAnswersEdge!]!
  nodes: [Answer!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type QuestionToAnswersEdge implements Edge {
  node: Answer!
  cursor: String!
}

type QuestionToAuthorsConnection implements Connection {
  edges: [QuestionToAuthorsEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type QuestionToAuthorsEdge implements Edge {
  node: User!
  cursor: String!
}

type UserToAuthorToAuthoredAnswersConnection implements Connection {
  edges: [UserToAuthorToAuthoredAnswersEdge!]!
  nodes: [Answer!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToAuthorToAuthoredAnswersEdge implements Edge {
  node: Answer!
  cursor: String!
}

type UserToAuthorToAuthoredQuestionsConnection implements Connection {
  edges: [UserToAuthorToAuthoredQuestionsEdge!]!
  nodes: [Question!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToAuthorToAuthoredQuestionsEdge implements Edge {
  node: Question!
  cursor: String!
}

type UserToAuthoredAnswersConnection implements Connection {
  edges: [UserToAuthoredAnswersEdge!]!
  nodes: [Answer!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToAuthoredAnswersEdge implements Edge {
  node: Answer!
  cursor: String!
}

type UserToAuthoredQuestionsConnection implements Connection {
  edges: [UserToAuthoredQuestionsEdge!]!
  nodes: [Question!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToAuthoredQuestionsEdge implements Edge {
  node: Question!
  cursor: String!
}

type Viewer {
  viewerID: ID
  user: User
}

input AnswerAddAuthorInput {
  answerID: ID!
  authorID: ID!
}

type AnswerAddAuthorPayload {
  answer: Answer!
}

input AnswerCreateInput {
  body: String!
  acceptedAnswer: Boolean!
  questionID: ID!
  authorID: ID!
}

type AnswerCreatePayload {
  answer: Answer!
}

input AnswerDeleteInput {
  answerID: ID!
}

type AnswerDeletePayload {
  deletedAnswerID: ID
}

input AnswerEditInput {
  answerID: ID!
  body: String
  acceptedAnswer: Boolean
  questionID: ID
  authorID: ID
}

type AnswerEditPayload {
  answer: Answer!
}

input AnswerRemoveAuthorInput {
  answerID: ID!
  authorID: ID!
}

type AnswerRemoveAuthorPayload {
  answer: Answer!
}

input QuestionAddAuthorInput {
  questionID: ID!
  authorID: ID!
}

type QuestionAddAuthorPayload {
  question: Question!
}

input QuestionCreateInput {
  title: String!
  questionBody: String!
  authorID: ID!
}

type QuestionCreatePayload {
  question: Question!
}

input QuestionDeleteInput {
  questionID: ID!
}

type QuestionDeletePayload {
  deletedQuestionID: ID
}

input QuestionEditInput {
  questionID: ID!
  title: String
  questionBody: String
  authorID: ID
}

type QuestionEditPayload {
  question: Question!
}

input QuestionRemoveAuthorInput {
  questionID: ID!
  authorID: ID!
}

type QuestionRemoveAuthorPayload {
  question: Question!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  emailAddress: String!
  password: String!
}

type UserCreatePayload {
  user: User!
}

type Query {
  node(id: ID!): Node
  recentQuestions: Question!
  user(userID: ID!): User
  userByEmail(emailAddress: String!): User
  viewer: Viewer!
}

type Mutation {
  answerAddAuthor(input: AnswerAddAuthorInput!): AnswerAddAuthorPayload!
  answerCreate(input: AnswerCreateInput!): AnswerCreatePayload!
  answerDelete(input: AnswerDeleteInput!): AnswerDeletePayload!
  answerEdit(input: AnswerEditInput!): AnswerEditPayload!
  answerRemoveAuthor(input: AnswerRemoveAuthorInput!): AnswerRemoveAuthorPayload!
  questionAddAuthor(input: QuestionAddAuthorInput!): QuestionAddAuthorPayload!
  questionCreate(input: QuestionCreateInput!): QuestionCreatePayload!
  questionDelete(input: QuestionDeleteInput!): QuestionDeletePayload!
  questionEdit(input: QuestionEditInput!): QuestionEditPayload!
  questionRemoveAuthor(input: QuestionRemoveAuthorInput!): QuestionRemoveAuthorPayload!
  userAuthJWT(input: UserAuthJWTInput!): UserAuthJWTPayload!
  userCreate(input: UserCreateInput!): UserCreatePayload!
}

type UserAuthJWTPayload {
  token: String!
  viewerID: ID!
}

input UserAuthJWTInput {
  emailAddress: String!
  password: String!
}
