// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInt,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import {
  GraphQLEdgeConnection,
  GraphQLNodeInterface,
  convertToGQLEnum,
  nodeIDEncoder,
} from "@snowtop/ent/graphql";
import {
  AnswerVote,
  AnswerVoteToVotersQuery,
  getAnswerVoteTypeValues,
} from "src/ent/";
import {
  AnswerType,
  AnswerVoteToVotersConnectionType,
  AnswerVoteTypeType,
  UserType,
} from "src/graphql/resolvers/internal";

export const AnswerVoteType = new GraphQLObjectType({
  name: "AnswerVote",
  fields: (): GraphQLFieldConfigMap<AnswerVote, RequestContext> => ({
    answer: {
      type: AnswerType,
      resolve: (answerVote: AnswerVote, args: {}, context: RequestContext) => {
        return answerVote.loadAnswer();
      },
    },
    voter: {
      type: UserType,
      resolve: (answerVote: AnswerVote, args: {}, context: RequestContext) => {
        return answerVote.loadVoter();
      },
    },
    id: {
      type: GraphQLNonNull(GraphQLID),
      resolve: nodeIDEncoder,
    },
    answerVoteType: {
      type: GraphQLNonNull(AnswerVoteTypeType),
      resolve: (answerVote: AnswerVote, args: {}, context: RequestContext) => {
        const ret = answerVote.answerVoteType;
        return convertToGQLEnum(
          ret,
          getAnswerVoteTypeValues(),
          AnswerVoteTypeType.getValues(),
        );
      },
    },
    voters: {
      type: GraphQLNonNull(AnswerVoteToVotersConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (answerVote: AnswerVote, args: {}, context: RequestContext) => {
        return new GraphQLEdgeConnection(
          answerVote.viewer,
          answerVote,
          (v, answerVote: AnswerVote) =>
            AnswerVoteToVotersQuery.query(v, answerVote),
          args,
        );
      },
    },
  }),
  interfaces: [GraphQLNodeInterface],
  isTypeOf(obj) {
    return obj instanceof AnswerVote;
  },
});
