// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInt,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import {
  GraphQLEdgeConnection,
  GraphQLNodeInterface,
  convertToGQLEnum,
  nodeIDEncoder,
} from "@snowtop/ent/graphql";
import {
  QuestionVote,
  QuestionVoteToVotersQuery,
  getVoteTypeValues,
} from "src/ent/";
import {
  QuestionType,
  QuestionVoteToVotersConnectionType,
  UserType,
  VoteTypeType,
} from "src/graphql/resolvers/internal";

export const QuestionVoteType = new GraphQLObjectType({
  name: "QuestionVote",
  fields: (): GraphQLFieldConfigMap<QuestionVote, RequestContext> => ({
    question: {
      type: QuestionType,
      resolve: (
        questionVote: QuestionVote,
        args: {},
        context: RequestContext,
      ) => {
        return questionVote.loadQuestion();
      },
    },
    voter: {
      type: UserType,
      resolve: (
        questionVote: QuestionVote,
        args: {},
        context: RequestContext,
      ) => {
        return questionVote.loadVoter();
      },
    },
    id: {
      type: GraphQLNonNull(GraphQLID),
      resolve: nodeIDEncoder,
    },
    voteType: {
      type: GraphQLNonNull(VoteTypeType),
      resolve: (
        questionVote: QuestionVote,
        args: {},
        context: RequestContext,
      ) => {
        const ret = questionVote.voteType;
        return convertToGQLEnum(
          ret,
          getVoteTypeValues(),
          VoteTypeType.getValues(),
        );
      },
    },
    voters: {
      type: GraphQLNonNull(QuestionVoteToVotersConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        questionVote: QuestionVote,
        args: {},
        context: RequestContext,
      ) => {
        return new GraphQLEdgeConnection(
          questionVote.viewer,
          questionVote,
          (v, questionVote: QuestionVote) =>
            QuestionVoteToVotersQuery.query(v, questionVote),
          args,
        );
      },
    },
  }),
  interfaces: [GraphQLNodeInterface],
  isTypeOf(obj) {
    return obj instanceof QuestionVote;
  },
});
